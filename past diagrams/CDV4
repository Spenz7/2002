classDiagram

%% =============== ENUMERATIONS ===============
class MaritalStatus {
    <<Enumeration>>
    SINGLE
    MARRIED
}
class FlatType {
    <<Enumeration>>
    TWO_ROOM
    THREE_ROOM
}
class ApplicationStatus {
    <<Enumeration>>
    PENDING
    SUCCESSFUL
    UNSUCCESSFUL
    BOOKED
    WITHDRAWN
}
class RegistrationStatus {
    <<Enumeration>>
    PENDING
    APPROVED
    REJECTED
}

%% =============== ABSTRACT BASE CLASS ===============
class User {
    <<Abstract>>
    - nric : String
    - password : String
    - age : int
    - maritalStatus : MaritalStatus
    + login() : boolean
    + changePassword(newPassword : String)
    + getAge() : int
    + getMaritalStatus() : MaritalStatus
}
note for User "LSP\nSubclasses can replace User without breaking behavior"

%% =============== INTERFACES ===============
class ProjectManager {
    <<interface>>
    + createProject(...)
    + editProject(...)
    + deleteProject(...)
    + toggleProjectVisibility(...)
    + hasActiveProject()
}

class AuthController {
    <<interface>>
    + authenticateUser(nric : String, password : String)
    + changePassword(user : User, newPassword : String)
    + validateNRIC(nric : String)
}
note for AuthController "SRP\nOnly handles login and password logic"

class ApplicationController {
    <<interface>>
    + submitApplication(applicant, project)
    + processWithdrawal(application)
    + validateEligibility(applicant, project)
    + enforceStatusTransition(application, newStatus)
}
note for ApplicationController "DIP\nDepends on abstraction (User), not concrete subclasses"

class FilterController {
    <<interface>>
    + filterByFlatType(flatType)
    + filterByNeighborhood(name)
    + saveFilterSettings(settings)
}
note for FilterController "ISP\nFiltering logic separated from unrelated interfaces"

%% =============== MAIN USER TYPES ===============
class Applicant {
    - currentApplication : Application
    - enquiries : List
    + applyForProject(project)
    + viewEligibleProjects()
    + submitEnquiry(project, msg)
    + editEnquiry(enquiry, newMessage)
    + deleteEnquiry(enquiry)
    + withdrawApplication()
    + getAppliedProject()
}

class HDBOfficer {
    - managedProjects : List
    - registrationStatus : RegistrationStatus
    + registerForProject(project)
    + viewRegistrationStatus()
    + processFlatBooking(application, flatType)
    + generateReceipt(booking)
    + updateFlatAvailability(project, flatType, quantity)
    + replyToEnquiry(enquiry, response)
    + canBook(application)
}

class HDBManager {
    - managedProjects : List
    + approveOfficer(officer)
    + approveApplication(application)
    + approveWithdrawal(application)
    + generateReport(filters)
    + filterProjects(filters)
    + getProjectsForApplicant(applicant)
    + viewAllEnquiries()
}
HDBManager ..|> ProjectManager

%% =============== PROJECT STRUCTURE ===============
class BTOProject {
    - projectName : String
    - neighborhood : String
    - availableUnits : Map
    - openingDate : Date
    - closingDate : Date
    - isVisible : boolean
    - assignedOfficers : List
    - manager : HDBManager
    + getAvailableFlats(flatType) : int
    + decrementFlatCount(flatType)
    + isApplicationPeriodActive() : boolean
    + isActive() : boolean
    + isVisibleToApplicant(applicant) : boolean
}

class Application {
    - status : ApplicationStatus
    - applicationDate : Date
    - project : BTOProject
    - applicant : Applicant
    + updateStatus(newStatus)
    + requestWithdrawal()
    + getCurrentStatus()
}

class FlatBooking {
    - receiptNumber : String
    - bookingDate : Date
    - flatType : FlatType
    + autoGenerateDetails()
}

class Enquiry {
    - content : String
    - response : String
    - timestamp : Date
    - replied : boolean
    + isEditable()
    + editContent(newMessage)
    + addResponse(response)
}

class Report {
    - bookings : List
    + filterByMaritalStatus(status)
    + filterByFlatType(type)
    + generateReportFile()
}
note for Report "OCP\nEasily extended with new filters without modifying class"

%% =============== RELATIONSHIPS ===============
User <|-- Applicant
User <|-- HDBOfficer
User <|-- HDBManager

Applicant "1" *-- "0..1" Application
Applicant "1" *-- "*" Enquiry
BTOProject "1" *-- "*" Application
BTOProject "1" *-- "*" Enquiry
Application "1" *-- "0..1" FlatBooking
HDBManager "1" *-- "*" BTOProject : manages
HDBOfficer "1" *-- "*" BTOProject : handles

AuthController ..> User : authenticates
ApplicationController ..> Application : manages
FilterController ..> BTOProject : filters
