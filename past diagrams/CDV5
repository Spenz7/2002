classDiagram
%% ================= ENUMERATIONS =================
class MaritalStatus {
  <<Enumeration>>
  SINGLE
  MARRIED
}

class FlatType {
  <<Enumeration>>
  TWO_ROOM
  THREE_ROOM
}

class ApplicationStatus {
  <<Enumeration>>
  PENDING
  SUCCESSFUL
  UNSUCCESSFUL
  BOOKED
  WITHDRAWN
}

class RegistrationStatus {
  <<Enumeration>>
  PENDING
  APPROVED
  REJECTED
}

%% ================= ENTITIES =================
class User {
  <<Abstract>>
  - nric : String
  - password : String
  - age : int
  - maritalStatus : MaritalStatus
  + login() : boolean
  + changePassword(newPassword : String)
}
note for User "LSP: Subclasses can replace User\nEncapsulation: fields private, accessed via methods"

class Applicant {
  - currentApplication : Application
  - enquiries : List~Enquiry~
  + viewEligibleProjects() : List~BTOProject~
  + applyForProject(project : BTOProject)
  + viewApplicationStatus() : ApplicationStatus
  + requestWithdrawal()
  + submitEnquiry(project : BTOProject, msg : String)
  + editEnquiry(enquiry : Enquiry, newMsg : String)
  + deleteEnquiry(enquiry : Enquiry)
}
note for Applicant "Polymorphism: can be treated as a User"

class HDBOfficer {
  - registrationStatus : RegistrationStatus
  - managedProjects : List~BTOProject~
  + registerForProject(project : BTOProject)
  + viewRegistrationStatus() : RegistrationStatus
  + replyToEnquiry(enquiry : Enquiry, response : String)
  + processFlatBooking(app : Application, flatType : FlatType)
  + updateFlatAvailability(project : BTOProject, flatType : FlatType, qty : int)
  + generateReceipt(app : Application)
}
note for HDBOfficer "Inheritance: extends Applicant to reuse apply logic"

class HDBManager {
  - managedProjects : List~BTOProject~
  + createProject(details)
  + editProject(project : BTOProject, updated)
  + deleteProject(project : BTOProject)
  + toggleVisibility(project : BTOProject, flag : boolean)
  + approveOfficerRegistration(officer : HDBOfficer, project : BTOProject)
  + approveApplication(app : Application)
  + approveWithdrawal(app : Application)
  + generateReport(filters)
  + filterOwnProjects() : List~BTOProject~
}
note for HDBManager "SRP: manages only project & approval logic"

class BTOProject {
  - projectName : String
  - neighborhood : String
  - availableUnits : Map~FlatType,int~
  - openingDate : Date
  - closingDate : Date
  - isVisible : boolean
  - assignedOfficers : List~HDBOfficer~
  - manager : HDBManager
  + isVisibleTo(applicant : Applicant) : boolean
  + getAvailableFlats(flatType : FlatType) : int
  + decrementFlatCount(flatType : FlatType)
  + assignOfficer(officer : HDBOfficer)
}
note for BTOProject "Encapsulation: controls its own unit counts & visibility"

class Application {
  - status : ApplicationStatus
  - applicationDate : Date
  - project : BTOProject
  - applicant : Applicant
  + updateStatus(newStatus : ApplicationStatus)
  + requestWithdrawal()
  + getCurrentStatus() : ApplicationStatus
}
note for Application "OCP: allow new status behaviors via state classes"

class FlatBooking {
  - receiptNumber : String
  - bookingDate : Date
  - flatType : FlatType
  + autoGenerateDetails()
}
note for FlatBooking "SRP: handles booking data and receipt logic"

class Enquiry {
  - content : String
  - response : String
  - timestamp : Date
  + editContent(newMsg : String)
  + addResponse(response : String)
}
note for Enquiry "SRP: encapsulates enquiry content & response"

%% ================= CONTROLLERS =================
class AuthController {
  <<Boundary>>
  + authenticate(nric : String, password : String) : User
  + changePassword(user : User, newPassword : String)
}
note for AuthController "SRP: handles only authentication\nDIP: a boundary interface"

class ApplicationController {
  <<Control>>
  + submitApplication(applicant : Applicant, project : BTOProject)
  + validateEligibility(applicant : Applicant, project : BTOProject) : boolean
  + enforceStatusTransition(app : Application, newStatus : ApplicationStatus)
  + processWithdrawal(app : Application)
}
note for ApplicationController "DIP: depends on Application abstraction"

class OfficerRegistrationController {
  <<Control>>
  + registerForProject(officer : HDBOfficer, project : BTOProject)
  + validateOfficerEligibility(officer : HDBOfficer, project : BTOProject) : boolean
  + approveRegistration(officer : HDBOfficer, project : BTOProject)
}
note for OfficerRegistrationController "SRP: handles officer registration workflow"

class ProjectController {
  <<Control>>
  + createProject(details)
  + editProject(project : BTOProject, updated)
  + deleteProject(project : BTOProject)
  + toggleVisibility(project : BTOProject, flag : boolean)
}
note for ProjectController "SRP: manages only project CRUD & visibility"

class FilterController {
  <<Control>>
  + filterByFlatType(flatType : FlatType) : List~BTOProject~
  + filterByNeighborhood(name : String) : List~BTOProject~
  + saveFilterSettings(settings)
}
note for FilterController "ISP: isolates filtering behavior"

class EnquiryController {
  <<Control>>
  + submitEnquiry(applicant : Applicant, project : BTOProject, msg : String)
  + editEnquiry(enquiry : Enquiry, newMsg : String)
  + deleteEnquiry(enquiry : Enquiry)
  + replyToEnquiry(officer : HDBOfficer, enquiry : Enquiry, response : String)
}
note for EnquiryController "SRP: handles only enquiry operations"

class BookingController {
  <<Control>>
  + bookFlat(officer : HDBOfficer, app : Application, flatType : FlatType)
  + generateReceipt(app : Application)
}
note for BookingController "SRP: handles booking & receipt generation"

%% ================= INHERITANCE =================
User <|-- Applicant
Applicant <|-- HDBOfficer
User <|-- HDBManager

%% ================= ASSOCIATIONS & DEPENDENCIES =================
Applicant "1" *-- "0..1" Application
Applicant "1" *-- "*" Enquiry
Applicant ..> AuthController
Applicant ..> ApplicationController
Applicant ..> FilterController
Applicant ..> EnquiryController

HDBOfficer "1" *-- "*" BTOProject : handles
HDBOfficer ..> AuthController
HDBOfficer ..> OfficerRegistrationController
HDBOfficer ..> ApplicationController
HDBOfficer ..> EnquiryController
HDBOfficer ..> BookingController

HDBManager "1" *-- "*" BTOProject : manages
HDBManager ..> AuthController
HDBManager ..> ProjectController
HDBManager ..> OfficerRegistrationController
HDBManager ..> ApplicationController
HDBManager ..> EnquiryController
HDBManager ..> FilterController

BTOProject "1" *-- "*" Application
BTOProject "1" *-- "*" Enquiry
BTOProject "1" *-- "*" HDBOfficer : assignedOfficers

Application "1" *-- "0..1" FlatBooking
Application ..> ApplicationController

FlatBooking --> Application
FlatBooking ..> BookingController

Enquiry ..> EnquiryController
